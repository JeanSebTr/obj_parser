/* 
 * File:   Game.cpp
 * Author: jeansebtr
 * 
 * Created on 9 f√©vrier 2011, 17:37
 */

#include <stdlib.h>
#include <iostream>

#include "Game.h"
#include "graphics/Model.h"
#include "graphics/ModelLoader.h"
#include "debug.h"

Game::Game() {
}

Game::Game(const Game& orig) {
}

Game::~Game() {
}


/*
static void Game::drawThread()
{
    
}

static void GLFWCALL Game::logicThread(void * arg)
{

}

static void GLFWCALL Game::soundThread(void * arg)
{

}

static void GLFWCALL Game::networkThread(void * arg)
{
    
}
*/
void Game::Init()
{
    dbg_info();
    if(!glfwInit())
    {
        exit(EXIT_FAILURE);
    }
    /*this->mDraw = glfwCreateMutex();
    this->mLogic = glfwCreateMutex();
    this->mNetwork = glfwCreateMutex();
    this->mSound = glfwCreateMutex();


    this->tLogic = glfwCreateThread(Game::logicThread, 0);
    this->drawThread();
    */

        int running = GL_TRUE;
    // Initialize GLFW
    if( !glfwInit() )
    {
        exit( EXIT_FAILURE );
    }
    // Open an OpenGL window
    if( !glfwOpenWindow( 300,300, 0,0,0,0,0,0, GLFW_WINDOW ) )
    {
        glfwTerminate();
        exit( EXIT_FAILURE );
    }

/* frame buffer clears should be to black */
glClearColor(0.0, 0.0, 0.0, 0.0);

/* set up projection transform */
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
glFrustum(-1.0, 1.0, -1.0, 1.0, 1.0, 10.0);
/* establish initial viewport */
/* pedantic, full window size is default viewport */
glViewport(0, 0, 300, 300);
Model m;
std::cout << "Loading model VIPER_CPL.obj" << std::endl;
if(ModelLoader::Load(&m, "./VIPER_CPL.obj"))
{
    std::cout << "Model loaded." << std::endl;
}
else
{
    std::cout << "Error loading model !!" << std::endl;
    running = GL_FALSE;
}
    // Main loop
    while( running )
    {
        // OpenGL rendering goes here...
glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
try
{
m.Draw();
}
catch(std::exception e)
{
    std::cout << "Erreur lors du dessin !" << std::endl;
    std::cout << e.what() << std::endl;
    exit(EXIT_FAILURE);
}

        glClear( GL_COLOR_BUFFER_BIT );
        // Swap front and back rendering buffers
        glfwSwapBuffers();
        // Check if ESC key was pressed or window was closed
        running = !glfwGetKey( GLFW_KEY_ESC ) &&
        glfwGetWindowParam( GLFW_OPENED );
    }
    
    
    glfwTerminate();
    exit( EXIT_SUCCESS );
}
